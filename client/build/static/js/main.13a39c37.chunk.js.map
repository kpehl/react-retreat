{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","pages/Home.js","components/Cart/index.js","pages/Admin.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/BookingHistory.js","pages/Reservation.js","pages/Success.js","components/Footer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","utils/reducers.js","utils/store.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","state","bookings","useSelector","dispatch","useDispatch","cart","history","useHistory","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","room","push","QUERY_BOOKINGS","gql","QUERY_ROOMS","QUERY_CATEGORIES","QUERY_USER","QUERY_ALL_USERS","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","rooms","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","user","Date","toUTCString","useState","startDate","setStartDate","endDate","setEndDate","formatDate","purchaseDate","bookingDateStart","bookingDateEnd","d","year","getFullYear","getMonth","getDate","placeholder","value","onChange","target","role","aria-label","removeFromCart","onStartDateChange","onEndDateChange","minimumDate","minimumLength","format","locale","enUS","startDateInputProps","endDateInputProps","focus","START_DATE","END_DATE","decode","this","getToken","token","isTokenExpired","exp","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Home","loadStripe","ReservationHistory","users","userData","bookingArray","bookingData","firstName","lastName","admin","email","booking","toLocaleDateString","Detail","useParams","currentProduct","setCurrentProduct","indexedRooms","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","Auth","handleChange","onSubmit","htmlFor","Signup","addUser","Nav","loggedIn","href","logout","BookingHistory","stripePromise","Reservation","useLazyQuery","getCheckout","res","redirectToCheckout","sessionId","checkout","session","getCart","sum","toFixed","calculateTotal","duration","roomIds","bookingsNumber","newstart","newEnd","Math","abs","floor","i","Success","addOrder","setTimeout","saveOrder","Footer","rel","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","Admin","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","cartOpen","reducer","action","newState","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.13a39c37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `react-retreat` with the version of 1\n    const request = window.indexedDB.open('react-retreat', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('rooms', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n\n  });\n}","export const UPDATE_ROOMS = \"UPDATE_ROOMS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const UPDATE_RESERVATION_DATES = 'UPDATE_RESERVATION_DATES'\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity,\n    bookings,\n  } = item;\n\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n  const history = useHistory();\n\n  const addToCart = () => {\n    // check for a matching item in the cart\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    // if there is a match, use UPDATE and update the purchase quantity, otherwise use ADD; store data in IndexedDB as well\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        room: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n    console.log(item);\n    history.push('/reservation');\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/rooms/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_BOOKINGS = gql`\n  {\n    bookings {\n    _id\n    purchaseDate\n    bookingDateStart\n    bookingDateEnd\n    user {\n      _id\n      firstName\n      lastName\n      }\n    }\n  }\n`;\n\nexport const QUERY_ROOMS = gql`\n  query getRooms($category: ID) {\n    rooms(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n      bookings {\n        _id\n        purchaseDate\n        bookingDateStart\n        bookingDateEnd\n        user {\n          _id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    email\n    admin\n    _id\n  }\n}\n`;\n\nexport const QUERY_ALL_USERS = gql`\n{\n  users {\n    _id\n    firstName\n    lastName\n    email\n    admin\n    password\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($_id: ID!, $duration: Int!) {\n    checkout(_id: $_id, duration: $duration) {\n      session\n    }\n  }\n`;","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_ROOMS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\nimport { UPDATE_ROOMS } from \"../../utils/actions\";\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_ROOMS);\n\n  useEffect(() => {\n    // when there is data to be stored\n    if (data) {\n      // store in the global state object\n      dispatch({\n        type: UPDATE_ROOMS,\n        rooms: data.rooms\n      });\n      // and store it in IndexedDB\n      data.rooms.forEach((room) => {\n        idbPromise('rooms', 'put', room);\n      });\n    } else if (!loading) {\n      // if loading is undefined, the user is offline - get data from the `rooms` store in IndexedDB\n      idbPromise('rooms', 'get').then((rooms) => {\n        // use the IndexedDB data to set the global state for offline browsing\n        dispatch({\n          type: UPDATE_ROOMS,\n          rooms: rooms\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterRooms() {\n    console.log(\"FILTER\");\n    if (!currentCategory) {\n      return state.rooms;\n    }\n\n    return state.rooms.filter(room => room.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Rooms:</h2>\n      {state.rooms.length ? (\n        <div className=\"flex-row\">\n            {filterRooms().map(room => (\n                <ProductItem\n                  key= {room._id}\n                  _id={room._id}\n                  image={room.image}\n                  name={room.name}\n                  price={room.price}\n                  quantity={room.quantity}\n                  bookings={room.bookings}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any rooms yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // Update the state with the categories upon page load or change\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch to update the state with the UPDATE_CATEGORIES action\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    // also store the category data in IndexedDB\n    categoryData.categories.forEach(category => {\n      idbPromise('categories', 'put', category);\n    });\n    } else if (!loading) {\n      // if the user is offline, load data from IndexedDB\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  UPDATE_RESERVATION_DATES,\n} from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch } from \"react-redux\";\n\n\nimport { enUS } from 'date-fns/locale'\nimport { DateRangePicker, START_DATE, END_DATE } from 'react-nice-dates'\nimport 'react-nice-dates/build/style.css'\nimport { QUERY_USER } from \"../../utils/queries\";\n\n\n\n\n\nconst CartItem = ({ item }) => {\n  // const state = useSelector((state) => {\n  //     return state;\n  // });\n  const dispatch = useDispatch();\n\n  let d = new Date();\n    let n = d.toUTCString();\n\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n\n    const { data } = useQuery(QUERY_USER);\n    let user;\n    \n    if(data){\n        user = data.user;\n    }\n  \nuseEffect(() => {\n    if(startDate && endDate){\n        console.log(formatDate(new Date()));        \n        /* create new booking object here and add to room */\n        dispatch({\n            type: UPDATE_RESERVATION_DATES,\n            _id: item._id,\n            bookings: {\n                purchaseDate: formatDate(new Date()),\n                bookingDateStart: formatDate(startDate),\n                bookingDateEnd: formatDate(endDate),\n                user: user,\n                room: item,\n                } \n          });\n          idbPromise(\"cart\", \"put\", { ...item, bookings: item.bookings });\n    }\n\n},[startDate, endDate]);\n\n  const removeFromCart = (item) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n    // also update IndexedDB\n    idbPromise(\"cart\", \"delete\", { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === \"0\") {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n      idbPromise(\"cart\", \"delete\", { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  function formatDate(d){\n      let year = d.getFullYear();\n      let month = d.getMonth();\n      let day = d.getDate();\n      return month + '/' + day + '/' + year\n  }\n\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n        <div className=\"flex-row\">\n            {/* insert date picker */}\n            <DateRangePicker\n      startDate={startDate}\n      endDate={endDate}\n      onStartDateChange={setStartDate}\n      onEndDateChange={setEndDate}\n      minimumDate={new Date()}\n      minimumLength={1}\n      format='dd MMM yyyy'\n      locale={enUS}\n    >\n      {({ startDateInputProps, endDateInputProps, focus }) => (\n        <div className='date-range'>\n          <input\n            className={'input' + (focus === START_DATE ? ' -focused' : '')}\n            {...startDateInputProps}\n            placeholder='Start date'\n          />\n          <span className='date-range_arrow' />\n          <input\n            className={'input' + (focus === END_DATE ? ' -focused' : '')}\n            {...endDateInputProps}\n            placeholder='End date'\n          />\n        </div>\n      )}\n    </DateRangePicker>\n            {/* End Date Picker */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx')\n\nconst Cart = () => {\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    const[getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        // async function to get data from IndexedDB\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, room: [...cart] });\n        };\n        // check global state for any cart room, and if not, use function to retrieve data from the IndexedDB store\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n        if(data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session })\n            });\n        }\n    }, [data]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span role=\"img\" aria-label=\"cart\">🛒</span>\n            </div>\n        )\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        getCheckout({\n            variables: { room: productIds }\n        });\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id)\n            }\n        });\n    }\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                {state.cart.map(item => (\n                    <CartItem key={item._id} item={item} />\n                ))}\n                <div className=\"flex-row space-between\">\n                    <strong>Total: ${calculateTotal()}</strong>\n                    {\n                    Auth.loggedIn() ?\n                        <button onClick={submitCheckout}>\n                        Checkout\n                        </button>\n                        :\n                        <span>(log in to check out)</span>\n                    }\n                </div>\n                </div>\n            ) : (\n                <h3>\n                <span role=\"img\" aria-label=\"shocked\">\n                    😱\n                </span>\n                You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default Cart;","import React, {useState} from \"react\";\nimport { Link } from \"react-router-dom\"\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_ALL_USERS, QUERY_BOOKINGS } from \"../utils/queries\";\n\nimport SingleUserDetail from '../components/SingleUserDetail'\n\nfunction ReservationHistory() {\n  const { data: userData } = useQuery(QUERY_ALL_USERS);\n  let users;\n\n  if (userData) {\n    users = userData.users;\n  }\n\n  const {data: bookingData } = useQuery(QUERY_BOOKINGS);\n  let bookingArray;\n\n  if (bookingData) {\n    bookingArray = bookingData.bookings;\n    // bookings = bookingArray.filter(booking => booking.user._id === user._id)\n  }\n\n  const [showDetails, setShowDetails] = useState(false);\n  const toggleDetails = () => {\n      setShowDetails(showDetails => !showDetails)\n  };\n  const clickHandler = () => {\n    toggleDetails();\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Home\n          </Link>\n\n        {users && bookingArray ? (\n          <>\n            <h2>Guest List</h2>\n            {users.map((user) => (\n              <div key={user._id} className=\"my-2\">\n                <h3>{user.firstName} {user.lastName} {user.admin}</h3>\n                <p>\n                  Email: {user.email}\n                </p>\n                {/* <p>\n                  Number of bookings: {user.bookings.length}\n                </p>\n                <button id={user._id} key={user._id} onClick={(user) => clickHandler(user)}>Details</button>\n                { showDetails ? <SingleUserDetail bookings={user.bookings} /> : null} */}\n              </div>\n            ))}\n            <h2>Bookings</h2>\n            {bookingArray.map((booking) => (\n              <div key={booking._id} className=\"my-2\">\n                <h3>Confirmation Number: {booking._id}</h3>\n                <div className=\"card px-1 py-1\" key={booking._id}>\n                <p>Guest: {booking.user.firstName} {booking.user.lastName}</p>\n                <p>Purchase Date: {new Date(parseInt(booking.purchaseDate)).toLocaleDateString()}</p>\n                {/* <p>Room: {booking.room.name}</p> */}\n                <p>Reservation Dates: <span>{new Date(parseInt(booking.bookingDateStart)).toLocaleDateString()} to {new Date(parseInt(booking.bookingDateEnd)).toLocaleDateString()}</span></p>\n            </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n\n    </>)\n\n};\n\nexport default ReservationHistory;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_ROOMS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nimport { UPDATE_ROOMS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART } from '../utils/actions';\n\nimport Cart from \"../components/Cart\";\n\nimport { idbPromise } from \"../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const history = useHistory();\n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_ROOMS);\n  \n  const { rooms, cart } = state;\n  \n  useEffect(() => {\n    // data already in the global state\n    if (rooms.length) {\n      setCurrentProduct(rooms.find(room => room._id === id));\n    } else if (data) {\n      // retrieve data from the server\n      dispatch({\n        type: UPDATE_ROOMS,\n        rooms: data.rooms\n      });\n      // and store that data in IndexedDB\n      data.rooms.forEach((room) => {\n        idbPromise('rooms', 'put', room);\n      });\n    // if the user is offline, use the cached data in IndexedDB\n    } else if (!loading) {\n      idbPromise('rooms', 'get').then((indexedRooms) => {\n        dispatch({\n          type: UPDATE_ROOMS,\n          rooms: indexedRooms\n        });\n      });\n    }\n  }, [rooms, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    // if the room is already in the cart, update the quantity instead of adding duplicate items\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // and also store in IndexedDB\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    // if the room is not yet in the cart, add it\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        room: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // and also store in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n    history.push('/reservation');\n  };\n\n  const removeFromCart = () => {\n    // remove the room from the cart\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    // update IndexedDB to reflect the deleted room\n    idbPromise('cart', 'delete', { ...currentProduct })\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Rooms\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from \"graphql-tag\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n/* export const ADD_ORDER = gql`\n  mutation addOrder($rooms: ID!) {\n    addOrder(rooms: $rooms) {\n      purchaseDate\n      bookingDateStart\n      bookingDuration\n      bookings {\n        room {\n          _id\n          name\n          description\n          price\n          quantity\n          category {\n            name\n          } \n        }\n      }\n    }\n  }\n`;  */\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($rooms: ID!){\n    addOrder(rooms: $rooms) {\n      purchaseDate\n      bookingDateStart\n      bookingDateEnd\n      rooms{\n        _id\n      }\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    console.log(\"in login\");\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      console.log(mutationResponse);\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../../utils/queries\";\n\nfunction Nav() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n  let admin;\n  console.log(data)\n  if (data) {\n    user = data.user;\n    admin = data.user.admin;\n  }\n \n  function showNavigation() {\n     if (Auth.loggedIn() && !admin) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/bookingHistory\">\n              Booking History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else if (Auth.loggedIn() && admin) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/admin\">\n              Admin\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start*/ }\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      )\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"hotel building\">🏨</span>\n          React Retreat\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER, QUERY_ROOMS, QUERY_BOOKINGS } from \"../utils/queries\";\n\n\nfunction BookingHistory() {\n  let user;\n  let bookings;\n  let bookingIds;\n  \n\n  const { data: userData } = useQuery(QUERY_USER);\n  // console.log(userData)\n\n  if (userData) {\n    console.log('user data present');\n    // console.log(userData);\n    user = userData.user;\n    console.log(user)\n  }\n\n  const {data: bookingData } = useQuery(QUERY_BOOKINGS);\n\n  if (bookingData) {\n    console.log('booking data present')\n    let bookingArray = bookingData.bookings;\n    bookings = bookingArray.filter(booking => booking.user._id === user._id)\n    console.log(bookings)\n    // bookingIds = bookings.map(booking => booking._id)\n    // console.log(bookingIds)\n  }\n\n  // const { data: roomData } = useQuery(QUERY_ROOMS);\n  \n  // if (roomData) {\n  //   console.log('room data present')\n  //   console.log(roomData)\n  //   let roomsArray = roomData.rooms;\n  //   console.log(roomsArray)\n  //   // let roomBookingsArray = roomsArray.filter(room => bookingIds.includes(room.bookings._id))\n  //   // console.log(roomBookingsArray)\n  // }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Home\n          </Link>\n\n        {user && bookings ? (\n          <>\n            <h2>Booking History for {user.firstName} {user.lastName}</h2>\n            <div className=\"flex-row\">\n                  <p>If you need to change or cancel a confirmed booking, please contact our staff.</p>\n            </div>\n            {bookings.map(booking => (\n              <div key={booking._id} className=\"my-2\">\n                <h4>Confirmation Number: {booking._id}</h4>\n                <div>\n                    <p><span>Reservation Dates: {new Date(parseInt(booking.bookingDateStart)).toLocaleDateString()} to {new Date(parseInt(booking.bookingDateEnd)).toLocaleDateString()}</span></p>  \n                    <p>Purchase Date: {new Date(parseInt(booking.purchaseDate)).toLocaleDateString()}</p>\n                  </div>\n                {/* <div className=\"flex-row\">\n                  {booking.room.map(({ _id, name, price}, index) => (\n                    <div key={index} className=\"my-2\">\n                      <Link to={`/rooms/${_id}`}>\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <p><span>${price}</span></p>\n                        <p><span>Reservation Dates: {new Date(parseInt(booking.bookingDateStart)).toLocaleDateString()} to {new Date(parseInt(booking.bookingDateEnd)).toLocaleDateString()}</span></p>  \n                        <p>Purchase Date: {new Date(parseInt(booking.purchaseDate)).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div> */}\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default BookingHistory;\n","import React, { useEffect } from \"react\";\nimport CartItem from \"../components/CartItem\";\nimport Auth from \"../utils/auth\";\n//import './style.css';\n\n\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../utils/actions\";\nimport { idbPromise } from \"../utils/helpers\";\nimport { QUERY_CHECKOUT } from \"../utils/queries\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nfunction Reservation() {\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    console.log(\"state\");\n    console.log(state);\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    // async function to get data from IndexedDB\n    async function getCart() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      dispatch({ type: ADD_MULTIPLE_TO_CART, room: [...cart] });\n    }\n    // check global state for any cart room, and if not, use function to retrieve data from the IndexedDB store\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n      console.log(\"IN CHECKOUT\");\n    const roomIds = [];\n    const currentBookings = [];\n    let duration;\n\n    state.cart.forEach((item) => {\n        let bookingsNumber = item.bookings.length;\n        let newstart = new Date(item.bookings[bookingsNumber -1].bookingDateStart);\n        let newEnd = new Date(item.bookings[bookingsNumber -1].bookingDateEnd);\n        \n        var res = Math.abs(newEnd - newstart) / 1000;\n        duration = Math.floor(res / 86400);\n\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        roomIds.push(item._id);\n      }\n    });\n    console.log('roomIds booking');\n    console.log(roomIds);\n    getCheckout({\n      variables: { \n          rooms: roomIds,\n          duration: duration,\n        }\n    });\n  }\n\n\n  return (\n    <div className=\"\">\n      <h2>Reservation</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n}\n\nexport default Reservation;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const rooms = cart.map(item => item._id);\n\n            if (rooms.length) {\n                const { data } = await addOrder({ variables: { rooms } });\n                const productData = data.addOrder.rooms;\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n\n            setTimeout(() => {\n                window.location.assign('/')\n            }, 3000)\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage.\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from 'react';\nimport { FaGithub } from 'react-icons/fa'\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n        <div className=\"flex-row space-between\">\n          <span>\n            &copy;{(new Date().getFullYear())}\n            {' '}by \n            {' '}<a href=\"https://github.com/cacevedo2011\" target=\"_blank\" rel=\"noopener noreferrer\">Cristian Acevedo</a>, \n            {' '}<a href=\"https://github.com/DCampos07\" target=\"_blank\" rel=\"noopener noreferrer\">Damaris Campos</a>, \n            {' '}<a href=\"https://github.com/fondofhats\" target=\"_blank\" rel=\"noopener noreferrer\">Michael Giddings</a>, and \n            {' '}<a href=\"https://github.com/kpehl\" target=\"_blank\" rel=\"noopener noreferrer\">Kathleen Pehl</a>.\n          </span>\n          <span><a href=\"https://github.com/kpehl/react-retreat\" target=\"_blank\" rel=\"noopener noreferrer\">< FaGithub /> GitHub Repository</a></span>\n        </div>\n        <div>\n          Photographs courtesy of <a href = \"https://unsplash.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a>\n        </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Admin from \"./pages/Admin\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport BookingHistory from \"./pages/BookingHistory\";\nimport Reservation from \"./pages/Reservation\";\nimport Success from \"./pages/Success\";\nimport Footer from \"./components/Footer\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/bookingHistory\" component={BookingHistory} />\n              <Route exact path=\"/reservation\" component={Reservation} />\n              <Route exact path=\"/rooms/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/admin\" component={Admin} />\n              <Route component={NoMatch} />\n            </Switch>\n            <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import actions\nimport {\n    UPDATE_ROOMS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    UPDATE_RESERVATION_DATES,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from './actions';\n\n// Set default state  \nconst defaultState = {\n    rooms: [],\n    categories: [],\n    currentCategory: '',\n    cart: [],\n    cartOpen: false\n}\n\n// Root reducer\nconst reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        // if the action type value is the value of `UPDATE_ROOMS`, return a new state object with an updated rooms array\n        case UPDATE_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.rooms],\n            };\n        // if the action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        // if the action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new state object with an updated currentCategory value\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // if the action type is ADD_TO_CART, return a new state object with the updated cart object\n        case ADD_TO_CART:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.room]  \n            };\n        // if the action type is REMOVE_FROM_CART, return a new state object with the updated cart and close the cart if last item is removed\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(room => {\n                return room._id !== action._id;\n            });\n            \n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n        // if the action type is UPDATE_CART_QUANTITY, return a new state object with the updated cart, updating only the quantity of the specified\n        // room ID and returning room for unchanged rooms\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(room => {\n                    if (action._id === room._id) {\n                        room.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return room;\n                })\n            };\n        // if action type is UPDATE_RESERVATION_DATES, return new state object with updated reservation dates.\n        case UPDATE_RESERVATION_DATES:\n            return {\n                ...state,\n                cart: state.cart.map(room => {\n                    if(action._id === room._id){\n                        room.bookings = [...room.bookings, action.bookings];\n                    }\n                    return room;\n                })\n            };            \n       // if the action type is CLEAR_CART, return a new state object with the cart emptied and closed\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        // if the action type is TOGGLE_CART, return a new state object with the cartOpen property toggled\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        // if it's none of these actions, do not update the state and just return the current state\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from '../utils/reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}